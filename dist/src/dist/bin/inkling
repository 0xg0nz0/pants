#!/usr/bin/env bash
#
# Copyright (C) 2012 Typesafe, Inc. <http://www.typesafe.com>
#
# Start script for inkling

# flags
unset debug_command

# get the source location for this script; handles symlinks
function get_script_path {
  local source="${BASH_SOURCE[0]}"
  while [ -h "$source" ] ; do
    local linked="$(readlink "$source")"
    local dir="$(cd -P $(dirname "$source") && cd -P $(dirname "$linked") && pwd)"
    source="$dir/$(basename "$linked")"
  done
  echo ${source}
}

# script details
declare -r script_path=$(get_script_path)
declare -r script_name=$(basename "$script_path")
declare -r script_dir="$(cd -P "$(dirname "$script_path")" && pwd)"

# directories
declare -r base_dir="$(cd "$script_dir/.." && pwd)"
declare -r lib_dir="$base_dir/lib"

# debug command before executing
function exec_command {
  if [ -n "$debug_command" ] ; then
    echo "exec command:"
    for arg in "$@"; do echo "$arg"; done
    echo ""
  fi
  exec "$@"
}

# debug command before forking
function fork_command {
  if [ -n "$debug_command" ] ; then
    echo "fork command:"
    for arg in "$@"; do echo "$arg"; done
    echo ""
  fi
  "$@" > /dev/null 2>&1 &
}

# nailgun settings
declare nailgun_port=4655
unset nailed shutdown

# arguments
declare -a java_args
declare -a args

# process arguments
while [[ $# -gt 0 ]] ; do
  case "$1" in
    -debug-command) debug_command=1; shift ;;

    -nailed) nailed=1; shift ;;
    -port) nailgun_port="$2"; shift 2 ;;
    -shutdown) shutdown=1; shift ;;

    -D*)
      java_args=("${java_args[@]}" "$1")
      args=("${args[@]}" "$1")
      shift ;;

    -V*)
      java_args=("${java_args[@]}" "${1:2}")
      args=("${args[@]}" "$1")
      shift ;;

    *)
      args=("${args[@]}" "$1")
      shift ;;
  esac
done

# reset "$@"
set -- "${args[@]}"

# allow setting of java command
if [[ -z "$JAVACMD" && -n "$JAVA_HOME" && -x "$JAVA_HOME/bin/java" ]]; then
  JAVACMD="$JAVA_HOME/bin/java"
fi
declare -r java_cmd="${JAVACMD:=java}"

# default java options
declare optMode=""
declare optXms="-Xms1536m"
declare optXmx="-Xmx1536m"
declare optXXMaxPermSize="-XX:MaxPermSize=384m"
declare optXXReservedCodeCacheSize="-XX:ReservedCodeCacheSize=192m"

# default server mode for nailed
[[ -n "$nailed" ]]  && optMode="-server"

# process java options
# allows overriding defaults in JAVA_OPTS, INKLING_OPTS, or -V args
declare all_opts=($JAVA_OPTS $INKLING_OPTS ${java_args[@]})
declare -a other_opts
for opt in ${all_opts[@]} ; do
  case "$opt" in
    -client) optMode="" ;;
    -server) optMode="-server" ;;
    -Xms*) optXms="$opt" ;;
    -Xmx*) optXmx="$opt" ;;
    -XX:MaxPermSize*) optXXMaxPermSize="$opt" ;;
    -XX:ReservedCodeCacheSize*) optXXReservedCodeCacheSize="$opt" ;;
    *) other_opts=("${other_opts[@]}" "$opt") ;;
  esac
done
declare java_options=($optMode $optXms $optXmx $optXXMaxPermSize $optXXReservedCodeCacheSize ${other_opts[@]})

function can_nailgun {
  # check nc command exists for port scanning
  type -P nc > /dev/null 2>&1
}

function check_port {
  nc -z -n -w 1 127.0.0.1 $1 > /dev/null 2>&1
}

function nailgun {
  # start nailgun if not already running
  if ! check_port $nailgun_port ; then
    fork_command \
      "$java_cmd" \
      "${java_options[@]}" \
      -Dinkling.home="$base_dir" \
      -classpath "$lib_dir/*" \
      com.typesafe.inkling.Nailgun $nailgun_port
    # give some time for startup
    local attempts=50
    while ! check_port $nailgun_port ; do
      [[ $attempts -eq 0 ]] && return 1
      attempts=$((attempts - 1))
      sleep 0.1
    done
  fi
  exec_command $script_dir/nailgun --nailgun-port $nailgun_port "$@"
}

if [ -n "$nailed" ] && can_nailgun ; then
  # run inkling via nailgun client
  if [ -n "$shutdown" ] ; then
    check_port $nailgun_port && nailgun shutdown
  else
    nailgun inkling "$@"
  fi
else
  # run inkling directly
  exec_command \
    "$java_cmd" \
    "${java_options[@]}" \
    -Dinkling.home="$base_dir" \
    -classpath "$lib_dir/*" \
    com.typesafe.inkling.Main "$@"
fi
